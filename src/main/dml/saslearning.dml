package pt.ulisboa.tecnico.saslearning.domain;

class Document {
	String title;
	String url;
	bytearray content;
}

relation DomainRootHasDocumentApplication {
	.pt.ist.fenixframework.DomainRoot playsRole root {
		multiplicity 1..1;
	}
	
	Document playsRole document {
		multiplicity 0..*;
	}
}

class Annotation {
	String annotation;
	String tag;
}

relation DocumentHasAnnotations {
	Document playsRole document {
		multiplicity 1..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

class User {
	String username;
	String password;
	String firstName;
	String lastName;
	String type;
}

relation DomainRootHasUsers {
	.pt.ist.fenixframework.DomainRoot playsRole root {
		multiplicity 1..1;
	}
	
	User playsRole user {
		multiplicity 0..*;
	}
}

relation UserHasAnnotations {
	User playsRole owner {
		multiplicity 1..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

class Scenario {
	String name;
	String identifier;
	String text;
}

relation documentHasScenarios {
	Document playsRole document {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 0..*;
	}
}

class QualityRequirement {
	String name;
}

relation scenarioHasQualityRequirement {
	Scenario playsRole scenario {
		multiplicity 0..1;
	}
	
	QualityRequirement playsRole qualityRequirement {
		multiplicity 0..1;
	}
}

class ScenarioElement {
	String identifier;
	String text;
}

relation scenarioElementHasAnnotations {
	ScenarioElement playsRole scenarioElement {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

class SrcOfStimulus extends ScenarioElement {
}


relation scenarioHasSrcOfStimulus {
	SrcOfStimulus playsRole srcOfStimulus {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
}

class Stimulus extends ScenarioElement {
}

relation scenarioaHasStimulus {
	Stimulus playsRole Stimulus {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario { 
		multiplicity 1..1;
	}
}

class Artifact extends ScenarioElement {
}

relation scenarioHasArtifact {
	Artifact playsRole artifact {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
}

class ResponseMeasure extends ScenarioElement {
}

relation scenarioHasResponseMeasure {
	ResponseMeasure playsRole responseMeasure {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
}

class Response extends ScenarioElement {
}

relation scenarioHasResponse {
	Response playsRole response {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
}

class Environment extends ScenarioElement {
}

relation scenarioHasEnvironment {
	Environment playsRole environment {
		multiplicity 0..1;
	}
	
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
}

relation scenarioHasAnnotations {
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
	
	Scenario playsRole scenario {
		multiplicity 0..1;
	}
}

class Tactic extends ScenarioElement{
}

relation scenarioHasTactic {
	Scenario playsRole scenario {
		multiplicity 1..1;
	}
	
	Tactic playsRole tactic {
		multiplicity 0..*;
	}
}

class Module {
	String name;
	String identifier;
	String text;
}

relation moduleHasAnnotations {
	Module playsRole module {
		multiplicity 0..1;
	}	
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}


relation documentHasModules {
	Document playsRole document {
		multiplicity 0..1;
	}
	
	Module playsRole module {
		multiplicity 0..*;
	}
}

relation moduleIsPartOfModule {
	Module playsRole parent{
		multiplicity 0..1;
	}
	
	Module playsRole child{
		multiplicity 0..*;
	}
}

relation moduleUsesModule {
	Module playsRole uses{
		multiplicity 0..*;
	}
	
	Module playsRole usedBy{
		multiplicity 0..*;
	}
}

relation moduleIsAModule {
	Module playsRole isA {
		multiplicity 0..*;
	}
	
	Module playsRole superModule {
		multiplicity 0..*;
	}
}

relation moduleCrosscutsModule {
	Module playsRole crossCuts {
		multiplicity 0..*;
	}
	
	Module playsRole crossCuttedBy {
		multiplicity 0..*;
	}
}

relation moduleOneToOneModule {
	Module playsRole oneToOne {
		multiplicity 0..*;
	}
	
	Module playsRole oneRelation {
		multiplicity 0..*;
	}
}

relation moduleOneToManyModule {
	Module playsRole oneToMany {
		multiplicity 0..*;
	}
	
	Module playsRole oneToManyRelations {
		multiplicity 0..*;
	}
}

relation moduleManyToManyModule {
	Module playsRole manyToMany {
		multiplicity 0..*;
	}
	
	Module playsRole manyToManyRelations {
		multiplicity 0..*;
	}
}

relation moduleAggregatesModule {
	Module playsRole aggregator {
		multiplicity 0..*;
	}
	
	Module playsRole aggregated {
		multiplicity 0..*;
	}
}

class View {
	String name;
	String viewtype;
	String text;
}

relation documentHasViews {
	Document playsRole document {
		multiplicity 0..1;
	}
	
	View playsRole view {
		multiplicity 0..*;
	}
}

relation viewHasModules {
	View playsRole view {
		multiplicity 0..*;
	}
	
	Module playsRole module {
		multiplicity 0..*;
	}
}

relation viewHasAnnotations {
	View playsRole view {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

class Component {
	String name;
	String text;
}

class Port {
	String name;
	String text;
}

relation documentHasComponents {
	Component playsRole component {
		multiplicity 0..*;
	}
	
	Document playsRole document {
		multiplicity 0..1;
	}
}

relation componentHasPorts {
	Component playsRole component {
		multiplicity 0..1;
	}
	
	Port playsRole port {
		multiplicity 0..*;
	}
}

relation componentHasAnnotations{
	Component playsRole component {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

relation portHasAnnotations{
	Port playsRole port  {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

class Connector {
	String name;
	String style;
	String text;
}

class Role {
	String name;
	String text;
}

relation documentHasConnectors {
	Document playsRole document {
		multiplicity 0..1;
	}
	
	Connector playsRole connector {
		multiplicity 0..*;
	}
}

relation connectorHasRoles {
	Connector playsRole connector {
		multiplicity 0..1;
	}
	
	Role playsRole role {
		multiplicity 0..*;
	}
}
relation connectorHasAnnotations {
	Connector playsRole connector {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

relation roleHasAnnotations {
	Role playsRole role {
		multiplicity 0..1;
	}
	
	Annotation playsRole annotation {
		multiplicity 0..*;
	}
}

relation viewHasComponents {
	Component playsRole component {
		multiplicity 0..*;
	}
	
	View playsRole view {
		multiplicity 0..*;
	}
}

relation viewHasConnectors {
	Connector playsRole connector {
		multiplicity 0..*;
	}
	
	View playsRole view {
		multiplicity 0..*;
	}
}

relation portIsAttachedToRole {
	Port playsRole port {
		multiplicity 0..1;
	}
	
	Role playsRole role {
		multiplicity 0..1;
	}
}










